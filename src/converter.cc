void convert_load_areas( const char* directory, FILE* output ){  char             tmp  [ TWO_LINES ];  char       area_file  [ ONE_LINES ];  area_data*      area;  FILE*             fp;  int           length;  bool             err;  DIR*            dirp;  struct dirent*    dp;  area_data* convert_area_list;    err = FALSE;    dirp = opendir( directory );    for( dp = readdir( dirp ); dp != NULL; dp = readdir( dirp ) ) {    if( *dp->d_name == '.' )      continue;        if( ( length = strlen( dp->d_name ) ) <= 4      || strcmp( &dp->d_name[length-4], ".are" ) )      continue;        if( length-4 >= ONE_LINES )      continue;    strncpy( area_file, dp->d_name, length-4 );    area_file[length-4] = '\0';        sprintf( tmp, "%s/%s", directory, dp->d_name );    if( ( fp = fopen( tmp, "r" ) ) == NULL ) {      fprintf( output, "Open_File: %s", strerror( errno ) );      fprintf( "-- File = '%s'", tmp );      err = TRUE;      break;    }        if( strcmp( fread_word( fp ), "#AREA" ) ) {      fprintf( output, "Load_area: missing header" );      fprintf( "-- File = '%s'", tmp );      err= TRUE;      break;    }        area       = new area_data;    area->file = alloc_string( area_file, MEM_AREA );        area->name      = fread_string( fp, MEM_AREA );    area->creator   = fread_string( fp, MEM_AREA );    area->help      = fread_string( fp, MEM_AREA );        area->level       = fread_number( fp );    area->reset_time  = fread_number( fp );    area->status      = fread_number( fp );        fprintf( output, "  -%s\n\r", area->name );        append( convert_area_list, area );    load_rooms( fp, area );    fclose( fp );  }  closedir( dirp );      }bool convert_load_rooms( FILE* fp, area_data* area, FILE* output ){  room_data *room;  room_data *room2;  if( strcmp( fread_word( fp ), "#ROOMS" ) ) {    fprintf( output, "Load_rooms: missing header" );    return FALSE;  }  for( ; ; ) {    int vnum;    char letter;    letter = fread_letter( fp );    if( letter != '#' ) {      fprintf( output, "Load_rooms: # not found." );      return FALSE;    }    if( ( vnum = fread_number( fp ) ) == 0 )       break;    if( get_room_index( vnum ) != NULL ) {      fprintf( output, "Load_rooms: vnum %d duplicated.", vnum );      return FALSE;    }    room               = new room_data;    room->area         = area;    room->vnum         = vnum;    room->name         = fread_string( fp, MEM_ROOM );    room->description  = fread_string( fp, MEM_ROOM );    room->comments     = fread_string( fp, MEM_ROOM );    room->room_flags   = fread_number( fp );    room->sector_type  = fread_number( fp );    room->size         = fread_number( fp );    room->reset        = NULL;    if( room->size < 0 || room->size >= MAX_SIZE )      room->size = SIZE_HORSE;    fread_number( fp );    read_exits( fp, room, vnum );    read_extra( fp, room->extra_descr );            for( ; ; ) {      letter = fread_letter( fp );      if( letter == 'S' )        break;        if( isdigit( letter ) || letter == '-' ) {        ungetc( letter, fp );        load( fp, room->reset );        continue;        }      if( letter == 'A' ) {        read( fp, room->action, room );        continue;        }            panic( "Load_rooms: vnum %d has flag not 'DES'.", vnum );      }             if( ( room2 = room->area->room_first ) == NULL ) {      room->area->room_first = room;      room->next = NULL;      }    else {      if( room2->vnum > room->vnum ) {        room->next = room2;        room->area->room_first = room;        }      else {        for( ; room2->next != NULL && room2->next->vnum <          room->vnum; room2 = room2->next );        room->next = room2->next;        room2->next = room;        }      }    }  return;}